version: '3.8'

services:
  # Mem0 API 服务
  mem0-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mem0-api
    ports:
      - "8000:8000"
    environment:
      # 必需的环境变量
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # 可选的环境变量
      - MEM0_API_KEY=${MEM0_API_KEY:-}
      - MEM0_LLM_MODEL=${MEM0_LLM_MODEL:-gpt-4o-mini}
      - MEM0_VECTOR_STORE_PROVIDER=${MEM0_VECTOR_STORE_PROVIDER:-qdrant}
      - MEM0_EMBEDDER_MODEL=${MEM0_EMBEDDER_MODEL:-text-embedding-3-small}
    volumes:
      # 持久化数据目录
      - ./data:/app/data
      - ./logs:/app/logs
      # 挂载配置文件（可选）
      - ./config:/app/config:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mem0-network
    depends_on:
      - qdrant

  # Qdrant 向量数据库
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: mem0-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    restart: unless-stopped
    networks:
      - mem0-network

  # Redis 缓存（可选）
  redis:
    image: redis:7.2-alpine
    container_name: mem0-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - mem0-network

  # Nginx 反向代理（生产环境）
  nginx:
    image: nginx:alpine
    container_name: mem0-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - mem0-api
    restart: unless-stopped
    networks:
      - mem0-network
    profiles:
      - production

# 网络配置
networks:
  mem0-network:
    driver: bridge

# 数据卷
volumes:
  qdrant_data:
    driver: local
  redis_data:
    driver: local